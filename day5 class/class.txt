MongoDB

mongoDb community server : it is local MongoDB
mongodb shell: cli
mongodb compass: gui 
mongodb atlas: cloud DB


did creation of database in mongodb compass i.e gui
for cli we use cmd and we type "mongosh"
and here 127.0.0.1:27017: "127.0.0.1" is local address of system and "27017" is the port number of mongodb

mongoshell commands and their functionalities:
show dbs: to show the databases
show collections or tables ; show tables/show collections
to use them: use {table name}
ie use AITAM

CRUD operation in mongoshell:

db.B1.find({//condition},{projection or what to find and we use Age:1 for including and _id:0 for excluding})

 for updation we use db.B1.updateOne({filter},{ updation value})
 example:
 db.B1.updateOne({name:"sarath"},{$set:{name:"sarath chandra }})
 db.B1.insertMany([{},{},{}])// we have give them in the array
 db.B1.delete({})
 db.B1.deleteMany({})




  Node.js:
  Node js is a runtime environment to run javascript in backend in serverside 
  node js is created to solve the only usage of js in browser side and with node js we can work in server side
   so if we learn js we can become full stack developer since react.js is frontend and node.js is a backend 

   npm init -y

   three types of modules:
builtin module
custom module
third party module


afternoon class
 created project folder and couple of folders
 and run npm init -y in server directory


server.js

const add=()=>{
    console.log("this is from add")
}
// add()
module.exports=add;

index.js

const add=require("./server")
add();

and run node server.js or run index.js


in http functionalities we have two parameters 
example
app.get("/path",//handlers// (req,res)=>{

})

status: 200 means success
status:400 means frontend error
status: 500 means backend error

we have installed thunder client and ran this using node index.js since it is a index.js code 
const express =require("express");
const app =express();
const PORT= 5173;
app.get("/",(req,res)=>{
    res.send(" hello this is from get")
})
app.post("/create",(req,res)=>{
    res.send(" hello this is from post")
})
app.put("/update",(req,res)=>{
    res.send(" hello this is from put")
})
app.delete("/delete",(req,res)=>{
    res.send(" hello this is from this from delete")
})
app.listen(PORT,()=>{
    console.log(`server is running at http://localhost:${PORT}/`)
})